
processor LinearGain
{
    input event float in;
    output stream float out;

    event in( float f)
    {
        // dB = 20.0f * log10(f);
        gain = f;
    }

    // float dB = 0.0f ;
    float gain = 0.0f;

    void run()
    {
        loop
        {
            // dB = 20.0f * log10(in);
            // gain = soul::dBtoGain (dB);
            out << gain;
            advance();
        }
    }
}



graph Level  [[ main ]]
{
    input smoothedGain.volume [[ label: "Volume", min: -40.0f, max: 0.0f, init: -40.0f, unit:"dB"]];
    // input event float gain [[ label: "Volume", min: -40.0f, max: 0.0f, init: -40.0f, step:0.00001, unit:"dB"]];
    input stream float<2> audioIn;
    output stream float<2> audioOut;


    let
    {
        smoothedGain = soul::gain::SmoothedGainParameter (0.0f);
        gainProcessor = soul::gain::DynamicGain (float<2>);
        sine = soul::oscillator::Sine(float<2>, 110, 0.5f);
        // linearGain = LinearGain;
    } 

    connection
    {
        // linearGain.out -> smoothedGain;
        // gain -> linearGain.in;
        // linearGain.out -> gainProcessor.gain;
        smoothedGain.gain-> gainProcessor.gain; 
        audioIn -> gainProcessor.in;
        // sine.out -> gainProcessor.in;
        gainProcessor.out -> audioOut; 
    }
}


