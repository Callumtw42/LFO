
processor LinearGain
{
    input event float in;
    output stream float out;

    event in( float f)
    {
        float targetdB = 20.0f * log10(f);
        currentdB += slopeTo(targetdB);
        gainOut = soul::dBtoGain(currentdB); 
    }

    float clmp(float val, float min, float max)
    {
        return val > max ? max : val < min ? min : val;
    }

    float slopeTo(float target)
    {
        float Dy = target - currentdB;
        float dx = processor.period;
        //Dy / Dx = dy / dx

        //Dy /dx = Dx / dy
        float dy = 1; 
        float Dx =  (dx * Dy) / dy;
        return Dy;

        // if (Dy > dy) return dy;
        // else if (Dy < dy) return -dy;
        // else return 0.0f;
    }

    float gainOut = 0.0f;
    float currentdB = 0.0f;

    void run()
    {
        loop
        {
            out << gainOut; 
            advance();
        }
    }
}



graph Level  [[ main ]]
{
    // input smoothedGain.volume [[ label: "Volume", min: -40.0f, max: 0.0f, init: -40.0f, unit:"dB"]];
    input event float gain [[ label: "Volume", min: 0.0f, max: 1.0f, init: 0.0f, step: 1.0f / 1024]];
    input stream float<2> audioIn;
    output stream float<2> audioOut;


    let
    {
        smoothedGain = soul::gain::SmoothedGainParameter (0.01f);
        gainProcessor = soul::gain::DynamicGain (float<2>);
        sine = soul::oscillator::Sine(float<2>, 100, 0.5f);

        linearGain = LinearGain;
    } 

    connection
    {
        // linearGain.out -> smoothedGain;
        gain -> linearGain.in;
        // linearGain.out -> gainProcessor.gain;
        linearGain.out -> gainProcessor.gain; 
        // smoothedGain.gain-> gainProcessor.gain; 
        audioIn -> gainProcessor.in;
        sine.out -> gainProcessor.in;
        gainProcessor.out -> audioOut; 
    }
}


